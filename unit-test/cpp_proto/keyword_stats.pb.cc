// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: keyword_stats.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "keyword_stats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* IndividualKeywordHistogram_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IndividualKeywordHistogram_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeywordActivation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeywordActivation_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeywordStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeywordStats_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_keyword_5fstats_2eproto() {
  protobuf_AddDesc_keyword_5fstats_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "keyword_stats.proto");
  GOOGLE_CHECK(file != NULL);
  IndividualKeywordHistogram_descriptor_ = file->message_type(0);
  static const int IndividualKeywordHistogram_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndividualKeywordHistogram, histogram_counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndividualKeywordHistogram, key_word_index_),
  };
  IndividualKeywordHistogram_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IndividualKeywordHistogram_descriptor_,
      IndividualKeywordHistogram::default_instance_,
      IndividualKeywordHistogram_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndividualKeywordHistogram, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IndividualKeywordHistogram, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IndividualKeywordHistogram));
  KeywordActivation_descriptor_ = file->message_type(1);
  static const int KeywordActivation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordActivation, time_counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordActivation, key_word_index_),
  };
  KeywordActivation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeywordActivation_descriptor_,
      KeywordActivation::default_instance_,
      KeywordActivation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordActivation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordActivation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeywordActivation));
  KeywordStats_descriptor_ = file->message_type(2);
  static const int KeywordStats_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordStats, net_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordStats, histograms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordStats, keyword_activations_),
  };
  KeywordStats_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeywordStats_descriptor_,
      KeywordStats::default_instance_,
      KeywordStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordStats, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeywordStats, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeywordStats));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_keyword_5fstats_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IndividualKeywordHistogram_descriptor_, &IndividualKeywordHistogram::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeywordActivation_descriptor_, &KeywordActivation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeywordStats_descriptor_, &KeywordStats::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_keyword_5fstats_2eproto() {
  delete IndividualKeywordHistogram::default_instance_;
  delete IndividualKeywordHistogram_reflection_;
  delete KeywordActivation::default_instance_;
  delete KeywordActivation_reflection_;
  delete KeywordStats::default_instance_;
  delete KeywordStats_reflection_;
}

void protobuf_AddDesc_keyword_5fstats_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023keyword_stats.proto\"N\n\032IndividualKeywo"
    "rdHistogram\022\030\n\020histogram_counts\030\001 \003(\021\022\026\n"
    "\016key_word_index\030\002 \001(\021\"A\n\021KeywordActivati"
    "on\022\024\n\014time_counter\030\001 \001(\022\022\026\n\016key_word_ind"
    "ex\030\002 \001(\021\"\203\001\n\014KeywordStats\022\021\n\tnet_model\030\001"
    " \001(\t\022/\n\nhistograms\030\002 \003(\0132\033.IndividualKey"
    "wordHistogram\022/\n\023keyword_activations\030\003 \003"
    "(\0132\022.KeywordActivationB0\n\032com.hello.suri"
    "pu.api.inputB\022KeywordStatsProtos", 352);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "keyword_stats.proto", &protobuf_RegisterTypes);
  IndividualKeywordHistogram::default_instance_ = new IndividualKeywordHistogram();
  KeywordActivation::default_instance_ = new KeywordActivation();
  KeywordStats::default_instance_ = new KeywordStats();
  IndividualKeywordHistogram::default_instance_->InitAsDefaultInstance();
  KeywordActivation::default_instance_->InitAsDefaultInstance();
  KeywordStats::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_keyword_5fstats_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_keyword_5fstats_2eproto {
  StaticDescriptorInitializer_keyword_5fstats_2eproto() {
    protobuf_AddDesc_keyword_5fstats_2eproto();
  }
} static_descriptor_initializer_keyword_5fstats_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int IndividualKeywordHistogram::kHistogramCountsFieldNumber;
const int IndividualKeywordHistogram::kKeyWordIndexFieldNumber;
#endif  // !_MSC_VER

IndividualKeywordHistogram::IndividualKeywordHistogram()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:IndividualKeywordHistogram)
}

void IndividualKeywordHistogram::InitAsDefaultInstance() {
}

IndividualKeywordHistogram::IndividualKeywordHistogram(const IndividualKeywordHistogram& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:IndividualKeywordHistogram)
}

void IndividualKeywordHistogram::SharedCtor() {
  _cached_size_ = 0;
  key_word_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IndividualKeywordHistogram::~IndividualKeywordHistogram() {
  // @@protoc_insertion_point(destructor:IndividualKeywordHistogram)
  SharedDtor();
}

void IndividualKeywordHistogram::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IndividualKeywordHistogram::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IndividualKeywordHistogram::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IndividualKeywordHistogram_descriptor_;
}

const IndividualKeywordHistogram& IndividualKeywordHistogram::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_keyword_5fstats_2eproto();
  return *default_instance_;
}

IndividualKeywordHistogram* IndividualKeywordHistogram::default_instance_ = NULL;

IndividualKeywordHistogram* IndividualKeywordHistogram::New() const {
  return new IndividualKeywordHistogram;
}

void IndividualKeywordHistogram::Clear() {
  key_word_index_ = 0;
  histogram_counts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IndividualKeywordHistogram::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:IndividualKeywordHistogram)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated sint32 histogram_counts = 1;
      case 1: {
        if (tag == 8) {
         parse_histogram_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 1, 8, input, this->mutable_histogram_counts())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, this->mutable_histogram_counts())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_histogram_counts;
        if (input->ExpectTag(16)) goto parse_key_word_index;
        break;
      }

      // optional sint32 key_word_index = 2;
      case 2: {
        if (tag == 16) {
         parse_key_word_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &key_word_index_)));
          set_has_key_word_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:IndividualKeywordHistogram)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:IndividualKeywordHistogram)
  return false;
#undef DO_
}

void IndividualKeywordHistogram::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:IndividualKeywordHistogram)
  // repeated sint32 histogram_counts = 1;
  for (int i = 0; i < this->histogram_counts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(
      1, this->histogram_counts(i), output);
  }

  // optional sint32 key_word_index = 2;
  if (has_key_word_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->key_word_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:IndividualKeywordHistogram)
}

::google::protobuf::uint8* IndividualKeywordHistogram::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndividualKeywordHistogram)
  // repeated sint32 histogram_counts = 1;
  for (int i = 0; i < this->histogram_counts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteSInt32ToArray(1, this->histogram_counts(i), target);
  }

  // optional sint32 key_word_index = 2;
  if (has_key_word_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->key_word_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndividualKeywordHistogram)
  return target;
}

int IndividualKeywordHistogram::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional sint32 key_word_index = 2;
    if (has_key_word_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->key_word_index());
    }

  }
  // repeated sint32 histogram_counts = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->histogram_counts_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        SInt32Size(this->histogram_counts(i));
    }
    total_size += 1 * this->histogram_counts_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IndividualKeywordHistogram::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IndividualKeywordHistogram* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IndividualKeywordHistogram*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IndividualKeywordHistogram::MergeFrom(const IndividualKeywordHistogram& from) {
  GOOGLE_CHECK_NE(&from, this);
  histogram_counts_.MergeFrom(from.histogram_counts_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_key_word_index()) {
      set_key_word_index(from.key_word_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IndividualKeywordHistogram::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndividualKeywordHistogram::CopyFrom(const IndividualKeywordHistogram& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndividualKeywordHistogram::IsInitialized() const {

  return true;
}

void IndividualKeywordHistogram::Swap(IndividualKeywordHistogram* other) {
  if (other != this) {
    histogram_counts_.Swap(&other->histogram_counts_);
    std::swap(key_word_index_, other->key_word_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IndividualKeywordHistogram::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IndividualKeywordHistogram_descriptor_;
  metadata.reflection = IndividualKeywordHistogram_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeywordActivation::kTimeCounterFieldNumber;
const int KeywordActivation::kKeyWordIndexFieldNumber;
#endif  // !_MSC_VER

KeywordActivation::KeywordActivation()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KeywordActivation)
}

void KeywordActivation::InitAsDefaultInstance() {
}

KeywordActivation::KeywordActivation(const KeywordActivation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KeywordActivation)
}

void KeywordActivation::SharedCtor() {
  _cached_size_ = 0;
  time_counter_ = GOOGLE_LONGLONG(0);
  key_word_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeywordActivation::~KeywordActivation() {
  // @@protoc_insertion_point(destructor:KeywordActivation)
  SharedDtor();
}

void KeywordActivation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeywordActivation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeywordActivation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeywordActivation_descriptor_;
}

const KeywordActivation& KeywordActivation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_keyword_5fstats_2eproto();
  return *default_instance_;
}

KeywordActivation* KeywordActivation::default_instance_ = NULL;

KeywordActivation* KeywordActivation::New() const {
  return new KeywordActivation;
}

void KeywordActivation::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<KeywordActivation*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(time_counter_, key_word_index_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeywordActivation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KeywordActivation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint64 time_counter = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &time_counter_)));
          set_has_time_counter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_key_word_index;
        break;
      }

      // optional sint32 key_word_index = 2;
      case 2: {
        if (tag == 16) {
         parse_key_word_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &key_word_index_)));
          set_has_key_word_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KeywordActivation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KeywordActivation)
  return false;
#undef DO_
}

void KeywordActivation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KeywordActivation)
  // optional sint64 time_counter = 1;
  if (has_time_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(1, this->time_counter(), output);
  }

  // optional sint32 key_word_index = 2;
  if (has_key_word_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->key_word_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KeywordActivation)
}

::google::protobuf::uint8* KeywordActivation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KeywordActivation)
  // optional sint64 time_counter = 1;
  if (has_time_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(1, this->time_counter(), target);
  }

  // optional sint32 key_word_index = 2;
  if (has_key_word_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->key_word_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KeywordActivation)
  return target;
}

int KeywordActivation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint64 time_counter = 1;
    if (has_time_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->time_counter());
    }

    // optional sint32 key_word_index = 2;
    if (has_key_word_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->key_word_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeywordActivation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeywordActivation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeywordActivation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeywordActivation::MergeFrom(const KeywordActivation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time_counter()) {
      set_time_counter(from.time_counter());
    }
    if (from.has_key_word_index()) {
      set_key_word_index(from.key_word_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeywordActivation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeywordActivation::CopyFrom(const KeywordActivation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeywordActivation::IsInitialized() const {

  return true;
}

void KeywordActivation::Swap(KeywordActivation* other) {
  if (other != this) {
    std::swap(time_counter_, other->time_counter_);
    std::swap(key_word_index_, other->key_word_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeywordActivation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeywordActivation_descriptor_;
  metadata.reflection = KeywordActivation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeywordStats::kNetModelFieldNumber;
const int KeywordStats::kHistogramsFieldNumber;
const int KeywordStats::kKeywordActivationsFieldNumber;
#endif  // !_MSC_VER

KeywordStats::KeywordStats()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:KeywordStats)
}

void KeywordStats::InitAsDefaultInstance() {
}

KeywordStats::KeywordStats(const KeywordStats& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:KeywordStats)
}

void KeywordStats::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  net_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeywordStats::~KeywordStats() {
  // @@protoc_insertion_point(destructor:KeywordStats)
  SharedDtor();
}

void KeywordStats::SharedDtor() {
  if (net_model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete net_model_;
  }
  if (this != default_instance_) {
  }
}

void KeywordStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeywordStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeywordStats_descriptor_;
}

const KeywordStats& KeywordStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_keyword_5fstats_2eproto();
  return *default_instance_;
}

KeywordStats* KeywordStats::default_instance_ = NULL;

KeywordStats* KeywordStats::New() const {
  return new KeywordStats;
}

void KeywordStats::Clear() {
  if (has_net_model()) {
    if (net_model_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      net_model_->clear();
    }
  }
  histograms_.Clear();
  keyword_activations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeywordStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:KeywordStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string net_model = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_net_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->net_model().data(), this->net_model().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "net_model");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_histograms;
        break;
      }

      // repeated .IndividualKeywordHistogram histograms = 2;
      case 2: {
        if (tag == 18) {
         parse_histograms:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_histograms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_histograms;
        if (input->ExpectTag(26)) goto parse_keyword_activations;
        break;
      }

      // repeated .KeywordActivation keyword_activations = 3;
      case 3: {
        if (tag == 26) {
         parse_keyword_activations:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keyword_activations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_keyword_activations;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:KeywordStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:KeywordStats)
  return false;
#undef DO_
}

void KeywordStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:KeywordStats)
  // optional string net_model = 1;
  if (has_net_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net_model().data(), this->net_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "net_model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->net_model(), output);
  }

  // repeated .IndividualKeywordHistogram histograms = 2;
  for (int i = 0; i < this->histograms_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->histograms(i), output);
  }

  // repeated .KeywordActivation keyword_activations = 3;
  for (int i = 0; i < this->keyword_activations_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->keyword_activations(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:KeywordStats)
}

::google::protobuf::uint8* KeywordStats::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:KeywordStats)
  // optional string net_model = 1;
  if (has_net_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->net_model().data(), this->net_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "net_model");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->net_model(), target);
  }

  // repeated .IndividualKeywordHistogram histograms = 2;
  for (int i = 0; i < this->histograms_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->histograms(i), target);
  }

  // repeated .KeywordActivation keyword_activations = 3;
  for (int i = 0; i < this->keyword_activations_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->keyword_activations(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KeywordStats)
  return target;
}

int KeywordStats::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string net_model = 1;
    if (has_net_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->net_model());
    }

  }
  // repeated .IndividualKeywordHistogram histograms = 2;
  total_size += 1 * this->histograms_size();
  for (int i = 0; i < this->histograms_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->histograms(i));
  }

  // repeated .KeywordActivation keyword_activations = 3;
  total_size += 1 * this->keyword_activations_size();
  for (int i = 0; i < this->keyword_activations_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keyword_activations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeywordStats::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeywordStats* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeywordStats*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeywordStats::MergeFrom(const KeywordStats& from) {
  GOOGLE_CHECK_NE(&from, this);
  histograms_.MergeFrom(from.histograms_);
  keyword_activations_.MergeFrom(from.keyword_activations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_net_model()) {
      set_net_model(from.net_model());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeywordStats::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeywordStats::CopyFrom(const KeywordStats& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeywordStats::IsInitialized() const {

  return true;
}

void KeywordStats::Swap(KeywordStats* other) {
  if (other != this) {
    std::swap(net_model_, other->net_model_);
    histograms_.Swap(&other->histograms_);
    keyword_activations_.Swap(&other->keyword_activations_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeywordStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeywordStats_descriptor_;
  metadata.reflection = KeywordStats_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
