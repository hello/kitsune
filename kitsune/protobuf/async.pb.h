/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.1 at Fri Jun 10 23:03:44 2016. */

#ifndef PB_ASYNC_PB_H_INCLUDED
#define PB_ASYNC_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Ack_Status {
    Ack_Status_SUCCESS = 1,
    Ack_Status_CLIENT_ENCODING_ERROR = 2,
    Ack_Status_CLIENT_REQUEST_ERROR = 3,
    Ack_Status_SERVER_ERROR = 4
} Ack_Status;

/* Struct definitions */
typedef struct _Ack {
    bool has_message_id;
    uint64_t message_id;
    bool has_status;
    Ack_Status status;
} Ack;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Ack_init_default                         {false, 0, false, (Ack_Status)0}
#define Ack_init_zero                            {false, 0, false, (Ack_Status)0}

/* Field tags (for use in manual encoding/decoding) */
#define Ack_message_id_tag                       1
#define Ack_status_tag                           2

/* Struct field encoding specification for nanopb */
extern const pb_field_t Ack_fields[3];

/* Maximum encoded size of messages (where known) */
#define Ack_size                                 17

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
