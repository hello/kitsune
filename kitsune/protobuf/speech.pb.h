/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.1 at Sat Oct 01 14:01:38 2016. */

#ifndef PB_SPEECH_PB_H_INCLUDED
#define PB_SPEECH_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Equalizer {
    Equalizer_NONE = 0,
    Equalizer_SENSE_ONE = 1
} Equalizer;

typedef enum _AudioFormat {
    AudioFormat_MP3 = 0,
    AudioFormat_ADPCM = 1,
    AudioFormat_RAW = 2,
    AudioFormat_LOSSLESS = 3
} AudioFormat;

typedef enum _Keyword {
    Keyword_NULL = 0,
    Keyword_OK_SENSE = 1,
    Keyword_STOP = 2,
    Keyword_SNOOZE = 3,
    Keyword_ALEXA = 4
} Keyword;

/* Struct definitions */
typedef struct _SpeechRequest {
    bool has_word;
    Keyword word;
    bool has_confidence;
    int32_t confidence;
    bool has_version;
    int32_t version;
    bool has_eq;
    Equalizer eq;
    bool has_response;
    AudioFormat response;
    bool has_sampling_rate;
    int32_t sampling_rate;
} SpeechRequest;

/* Default values for struct fields */
extern const Equalizer SpeechRequest_eq_default;
extern const AudioFormat SpeechRequest_response_default;
extern const int32_t SpeechRequest_sampling_rate_default;

/* Initializer values for message structs */
#define SpeechRequest_init_default               {false, (Keyword)0, false, 0, false, 0, false, Equalizer_SENSE_ONE, false, AudioFormat_MP3, false, 16000}
#define SpeechRequest_init_zero                  {false, (Keyword)0, false, 0, false, 0, false, (Equalizer)0, false, (AudioFormat)0, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define SpeechRequest_word_tag                   1
#define SpeechRequest_confidence_tag             2
#define SpeechRequest_version_tag                3
#define SpeechRequest_eq_tag                     4
#define SpeechRequest_response_tag               5
#define SpeechRequest_sampling_rate_tag          6

/* Struct field encoding specification for nanopb */
extern const pb_field_t SpeechRequest_fields[7];

/* Maximum encoded size of messages (where known) */
#define SpeechRequest_size                       51

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
